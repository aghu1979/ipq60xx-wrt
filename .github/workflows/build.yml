# .github/workflows/build.yml
name: Reusable OpenWrt Build Workflow

on:
  workflow_call:
    inputs:
      branch_config:
        required: true
        type: string
        description: '分支配置名，如 base_openwrt'
      package_config:
        required: true
        type: string
        description: '软件包配置名，如 Pro'
      target_arch:
        required: true
        type: string
        default: 'ipq60xx'
        description: '目标芯片架构'
      ubuntu_version:
        description: '选择运行环境操作系统版本'
        required: true
        type: string
        default: 'ubuntu-22.04'

jobs:
  build:
    runs-on: ${{ inputs.ubuntu_version }}

    # 定义彩色输出变量
    env:
      GREEN: '\033[0;32m'
      YELLOW: '\033[1;33m'
      RED: '\033[0;31m'
      BLUE: '\033[0;34m'
      CYAN: '\033[0;36m'
      MAGENTA: '\033[0;35m'
      BOLD: '\033[1m'
      BG_RED: '\033[41m'
      NC: '\033[0m' # No Color

    steps:
      - name: 🚀 准备就绪
        run: echo -e "${GREEN}▶️ 开始执行 OpenWrt 自动化构建流程...${NC}"

      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 💾 缓存 OpenWrt 源码
        id: cache-source
        uses: actions/cache@v4
        with:
          path: openwrt
          key: ${{ runner.os }}-${{ inputs.branch_config }}-source-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.branch_config }}-source-
      
      - name: 📥 克隆源码
        if: steps.cache-source.outputs.cache-hit != 'true'
        run: |
          echo -e "${YELLOW}⬇️ 缓存未命中，正在从远程克隆源码...${NC}"
          if [ "${{ inputs.branch_config }}" == "base_immwrt" ]; then
            REPO_URL="https://github.com/laipeng668/immortalwrt.git"
            REPO_BRANCH="master"
          elif [ "${{ inputs.branch_config }}" == "base_libwrt" ]; then
            REPO_URL="https://github.com/laipeng668/openwrt-6.x.git"
            REPO_BRANCH="k6.12-nss"
          else
            REPO_URL="https://github.com/laipeng668/openwrt.git"
            REPO_BRANCH="master"
          fi
          echo "正在从 $REPO_URL (分支: $REPO_BRANCH) 克隆源码到 openwrt/ 目录"
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          echo -e "${GREEN}✅ 源码克隆完成。${NC}"

      - name: 💾 缓存 Feeds 和下载包
        id: cache-feeds-dl
        uses: actions/cache@v4
        with:
          path: |
            openwrt/dl
            openwrt/feeds
          key: ${{ runner.os }}-${{ inputs.branch_config }}-feeds-dl
          restore-keys: |
            ${{ runner.os }}-${{ inputs.branch_config }}-feeds-dl-
        if: success()

      - name: 🛠️ 安装编译依赖
        run: |
          echo -e "${YELLOW}🔧 正在安装编译依赖...${NC}"
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext libelf-dev libssl-dev \
          libncurses5-dev libncursesw5-dev python3-pyelftools \
          python3-setuptools rsync swig unzip wget python3-pip ccache
          echo -e "${GREEN}✅ 编译依赖安装完成。${NC}"

      - name: 🔄 更新和安装 Feeds
        if: steps.cache-feeds-dl.outputs.cache-hit != 'true'
        run: |
          echo -e "${YELLOW}🔄 缓存未命中，正在更新和安装 Feeds...${NC}"
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo -e "${GREEN}✅ Feeds 更新和安装完成。${NC}"
      
      - name: ✅ Feeds 缓存命中
        if: steps.cache-feeds-dl.outputs.cache-hit == 'true'
        run: |
          echo -e "${GREEN}✅ Feeds 和下载包缓存命中，跳过更新和安装步骤。${NC}"

      - name: 🔧 合并配置文件
        run: |
          cd openwrt
          echo -e "${YELLOW}🔧 正在合并配置: 分支-${{ inputs.branch_config }}, 软件-${{ inputs.package_config }}, 架构-${{ inputs.target_arch }}${NC}"
          cat ../configs/base_${{ inputs.target_arch }}.config \
              ../configs/${{ inputs.branch_config }}.config \
              ../configs/${{ inputs.package_config }}.config > .config
          echo -e "${GREEN}✅ 配置文件合并完成。${NC}"
          # 显示配置文件内容
          echo "::group::📄 查看配置文件 .config 文件内容"
          cat .config
          echo "::endgroup::"

      - name: 🧪 运行自定义DIY脚本
        run: |
          cd openwrt
          echo -e "${YELLOW}🧪 正在运行自定义DIY脚本...${NC}"
          chmod +x $GITHUB_WORKSPACE/scripts/diy.sh
          $GITHUB_WORKSPACE/scripts/diy.sh ${{ inputs.branch_config }} ${{ inputs.target_arch }}
          echo -e "${GREEN}✅ DIY脚本执行完成。${NC}"

      - name: 🧹 格式化配置文件并分析差异
        run: |
          cd openwrt
          echo -e "${YELLOW}🧹 正在格式化 .config 文件以解决潜在的格式问题...${NC}"
          
          # 保存格式化前的配置，用于对比
          cp .config .config.pre-defconfig
          
          # 执行格式化
          make defconfig
          echo -e "${GREEN}✅ .config 文件格式化完成。${NC}"

          # 显示格式化后的最终配置文件内容
          echo "::group::📄 查看格式化后的最终 .config 文件内容"
          cat .config
          echo "::endgroup::"
          
          # 对比并显示 Luci 软件包的差异
          echo "::group::🔍 对比格式化前后的 Luci 软件包差异"
          echo "正在分析 'make defconfig' 对 Luci 软件包的影响..."
          
          # 找出格式化前所有值为y的luci软件包
          echo -e "\n${YELLOW}📋 格式化前启用的 Luci 软件包 (CONFIG_PACKAGE_luci*=y):${NC}"
          grep "CONFIG_PACKAGE_luci.*=y" .config.pre-defconfig | sort > /tmp/luci_enabled_before.txt
          cat /tmp/luci_enabled_before.txt
          
          # 检查这些软件包在格式化后的状态
          echo -e "\n${YELLOW}📋 检查这些软件包在格式化后的状态:${NC}"
          echo -e "${CYAN}格式 | 软件包名称 | 格式化前状态 | 格式化后状态 | 变化${NC}"
          echo "------|------------|--------------|--------------|------"
          
          # 统计变量
          total_packages=0
          changed_packages=0
          removed_packages=0
          
          while IFS= read -r line; do
            pkg_name=$(echo "$line" | cut -d'=' -f1)
            before_status=$(echo "$line" | cut -d'=' -f2)
            total_packages=$((total_packages + 1))
            
            # 检查格式化后的状态
            after_line=$(grep "^$pkg_name=" .config)
            if [ -n "$after_line" ]; then
              after_status=$(echo "$after_line" | cut -d'=' -f2)
              if [ "$before_status" = "$after_status" ]; then
                change="无变化"
                echo -e "格式化 | $pkg_name | $before_status | $after_status | $change"
              else
                changed_packages=$((changed_packages + 1))
                change="${RED}状态改变${NC}"
                echo -e "格式化 | ${BOLD}$pkg_name${NC} | $before_status | ${RED}$after_status${NC} | $change"
              fi
            else
              removed_packages=$((removed_packages + 1))
              after_status="${RED}未找到${NC}"
              change="${BG_RED}已移除${NC}"
              echo -e "格式化 | ${BOLD}$pkg_name${NC} | $before_status | $after_status | $change"
            fi
          done < /tmp/luci_enabled_before.txt
          
          # 找出格式化后新增的luci软件包
          echo -e "\n${YELLOW}📋 格式化后新增的 Luci 软件包:${NC}"
          grep "CONFIG_PACKAGE_luci.*=y" .config | sort > /tmp/luci_enabled_after.txt
          new_packages=$(comm -13 <(sort /tmp/luci_enabled_before.txt) <(sort /tmp/luci_enabled_after.txt))
          if [ -n "$new_packages" ]; then
            echo -e "${GREEN}$new_packages${NC}"
          else
            echo -e "${CYAN}无新增软件包${NC}"
          fi
          
          # 显示统计信息
          echo -e "\n${MAGENTA}📊 统计信息:${NC}"
          echo -e "总软件包数: ${BOLD}$total_packages${NC}"
          echo -e "状态改变: ${RED}$changed_packages${NC}"
          echo -e "已移除: ${RED}$removed_packages${NC}"
          echo -e "新增软件包: ${GREEN}$(echo "$new_packages" | grep -c . || echo 0)${NC}"
          
          # 显示完整的差异对比，高亮显示差异
          echo -e "\n${YELLOW}📋 完整的 Luci 软件包差异对比:${NC}"
          # 创建一个临时脚本来处理diff输出并高亮差异
          cat > /tmp/highlight_diff.sh << 'EOF'
          #!/bin/bash
          while IFS= read -r line; do
            case "$line" in
              "<"*)
                echo -e "${RED}$line${NC}"
                ;;
              ">"*)
                echo -e "${GREEN}$line${NC}"
                ;;
              "---"*)
                echo -e "${CYAN}$line${NC}"
                ;;
              *)
                echo "$line"
                ;;
            esac
          done
          EOF
          chmod +x /tmp/highlight_diff.sh
          
          # 使用diff并高亮显示差异
          diff <(grep "CONFIG_PACKAGE_luci" .config.pre-defconfig | sort) <(grep "CONFIG_PACKAGE_luci" .config | sort) | /tmp/highlight_diff.sh || echo -e "${CYAN}无差异${NC}"
          
          echo -e "\n${GREEN}✅ Luci 软件包对比分析完成。${NC}"
          echo "::endgroup::"

      - name: 🏗️ 编译固件
        run: |
          cd openwrt
          echo -e "${YELLOW}🚀 开始编译固件... (这可能需要很长时间)${NC}"
          make -j$(nproc) || (echo -e "${RED}❌ 并行编译失败，正在尝试单线程详细编译...${NC}" && make -j1 V=s)
          echo -e "${GREEN}✅ 固件编译完成。${NC}"

      - name: 📦 收集固件产物
        run: |
          cd openwrt
          mkdir -p ../firmware
          find bin/targets/ -type f \( -name "*sysupgrade*" -o -name "*factory*" \) -exec cp {} ../firmware/ \;
          echo -e "${GREEN}✅ 固件产物已收集。${NC}"
          ls -lh ../firmware/

      - name: 📤 上传固件产物
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-${{ inputs.target_arch }}-${{ inputs.branch_config }}-${{ inputs.package_config }}
          path: ./firmware/

      - name: 📤 上传错误日志 (仅在失败时)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-${{ inputs.branch_config }}-${{ inputs.package_config }}
          path: |
            openwrt/build.log
            openwrt/.config

      - name: 📋 生成构建摘要
        if: always()
        run: |
          echo "## 📦 OpenWrt 构建摘要" >> $GITHUB_STEP_SUMMARY
          echo "### 分支: ${{ inputs.branch_config }} | 软件: ${{ inputs.package_config }} | 架构: ${{ inputs.target_arch }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 目标文件 | 大小 | SHA256 |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|---|" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "./firmware" ] && [ "$(ls -A ./firmware)" ]; then
            for file in ./firmware/*; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                filesize=$(stat -c%s "$file" | awk '{printf "%.2f MB", $1/1024/1024}')
                sha256=$(sha256sum "$file" | awk '{print $1}')
                echo "| $filename | $filesize | \`$sha256\` |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "| 未生成固件文件 | - | - |" >> $GITHUB_STEP_SUMMARY
          fi

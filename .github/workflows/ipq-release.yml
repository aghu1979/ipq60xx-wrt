name: 通用型多仓库多架构 OpenWrt 自动构建 (共享缓存版)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      chipset:
        description: '选择芯片架构'
        required: true
        default: 'ipq60xx'
        type: choice
        options: [ipq60xx, x86-64, rockchip-armv8]
      ubuntu_version:
        description: '选择 Ubuntu 版本'
        required: true
        default: 'ubuntu-22.04'
        type: choice
        options: [ubuntu-22.04, ubuntu-24.04]
  # 北京时间周五0点自动编译 (UTC时间周四16点)
  schedule:
    - cron: '0 16 * * 4'

env:
  # --- 仓库配置 ---
  REPOS_CONFIG_FILE: 'configs/repos.json'
  # --- 构建配置 ---
  DEFAULT_CHIPSET: 'ipq60xx'
  PROFILES: '["Pro", "Max", "Ultra"]'
  FIRMWARE_TYPES: '["squashfs-factory.bin", "squashfs-sysupgrade.bin"]'
  # --- 依赖和脚本 ---
  DEPENDS_SCRIPT_URL: 'git.io/depends-ubuntu-2204'
  SCRIPT_DIY: 'scripts/diy.sh'
  SCRIPT_BUILD_HELPER: 'scripts/build-helper.sh'
  SCRIPT_LIB: 'scripts/lib.sh'
  TZ: Asia/Shanghai

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.set-matrix.outputs.matrix }}
      ubuntu-matrix: ${{ steps.set-matrix.outputs.ubuntu }}
      release-tag: ${{ steps.set-matrix.outputs.tag }}
      chipset: ${{ steps.set-matrix.outputs.chipset }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置脚本执行权限
        run: |
          chmod +x scripts/*.sh
          chmod +x configs/*.json

      - name: 调试配置文件
        run: |
          # 加载函数库
          source ${{ env.SCRIPT_LIB }}
          
          CHIPSET="${{ github.event.inputs.chipset || env.DEFAULT_CHIPSET }}"
          BASE_CONFIG="configs/${CHIPSET}.base.config"
          
          log_info "当前工作目录: $(pwd)"
          log_info "列出configs目录内容:"
          ls -la configs/
          
          if [ -f "$BASE_CONFIG" ]; then
            log_info "配置文件 $BASE_CONFIG 存在"
            log_info "配置文件大小: $(wc -l < "$BASE_CONFIG") 行"
            log_info "配置文件前30行:"
            head -30 "$BASE_CONFIG"
            
            log_info "查找所有包含DEVICE的配置行:"
            grep -n "DEVICE" "$BASE_CONFIG" || log_warning "未找到包含DEVICE的配置行"
            
            log_info "查找所有包含TARGET的配置行:"
            grep -n "TARGET" "$BASE_CONFIG" | head -20 || log_warning "未找到包含TARGET的配置行"
            
            log_info "查找所有=y的配置行:"
            grep -n "=y" "$BASE_CONFIG" | head -20 || log_warning "未找到=y的配置行"
            
            log_info "查找设备配置行 (正则匹配):"
            grep -n -E "^CONFIG_TARGET(_DEVICE)?_[a-zA-Z0-9_]+_DEVICE_[a-zA-Z0-9_-]+=y" "$BASE_CONFIG" || log_warning "未找到设备配置行"
            
            log_info "尝试更宽松的匹配:"
            grep -n -E "CONFIG_TARGET.*DEVICE.*=y" "$BASE_CONFIG" || log_warning "未找到宽松匹配的设备配置行"
            
            log_info "提取的设备名:"
            grep -E "^CONFIG_TARGET(_DEVICE)?_[a-zA-Z0-9_]+_DEVICE_[a-zA-Z0-9_-]+=y" "$BASE_CONFIG" | \
              sed -E 's/^CONFIG_TARGET(_DEVICE)?_[a-zA-Z0-9_]+_DEVICE_([a-zA-Z0-9_-]+)=y$/\2/' | \
              sort -u || log_warning "未能提取到设备名"
            
            log_info "使用宽松匹配提取的设备名:"
            grep -E "CONFIG_TARGET.*DEVICE.*=y" "$BASE_CONFIG" | \
              sed -E 's/^.*DEVICE_([a-zA-Z0-9_-]+)=y$/\1/' | \
              sort -u || log_warning "宽松匹配未能提取到设备名"
          else
            log_error "配置文件 $BASE_CONFIG 不存在"
            exit 1
          fi
          
          log_info "仓库配置文件内容:"
          cat ${{ env.REPOS_CONFIG_FILE }}

      - name: 独立调试设备提取
        run: |
          # 加载函数库
          source ${{ env.SCRIPT_LIB }}
          
          CHIPSET="${{ github.event.inputs.chipset || env.DEFAULT_CHIPSET }}"
          BASE_CONFIG="configs/${CHIPSET}.base.config"
          
          log_info "=== 独立调试设备提取 ==="
          
          # 直接测试脚本
          log_info "直接测试 get-devices 命令:"
          ${{ env.SCRIPT_BUILD_HELPER }} get-devices "$BASE_CONFIG"
          
          log_info "=== 测试不同的正则表达式 ==="
          
          # 测试原始正则
          log_info "测试原始正则:"
          grep -E "^CONFIG_TARGET(_DEVICE)?_[a-zA-Z0-9_]+_DEVICE_[a-zA-Z0-9_-]+=y" "$BASE_CONFIG" || log_warning "原始正则无匹配"
          
          # 测试宽松正则
          log_info "测试宽松正则:"
          grep -E "CONFIG_TARGET.*DEVICE.*=y" "$BASE_CONFIG" || log_warning "宽松正则无匹配"
          
          # 测试简单正则
          log_info "测试简单正则:"
          grep -E "DEVICE_[a-zA-Z0-9_-]+=" "$BASE_CONFIG" || log_warning "简单正则无匹配"
          
          # 显示所有包含=y的行
          log_info "所有包含=y的行:"
          grep "=y" "$BASE_CONFIG" | head -10 || log_warning "未找到=y的行"

      - name: 生成构建矩阵
        id: set-matrix
        run: |
          # 加载函数库
          source ${{ env.SCRIPT_LIB }}
          
          CHIPSET="${{ github.event.inputs.chipset || env.DEFAULT_CHIPSET }}"
          echo "chipset=$CHIPSET" >> $GITHUB_OUTPUT
          
          BASE_CONFIG="configs/${CHIPSET}.base.config"
          if [ ! -f "$BASE_CONFIG" ]; then 
            log_error "基础配置文件 $BASE_CONFIG 不存在！"; 
            exit 1; 
          fi
          
          REPOS_JSON=$(cat ${{ env.REPOS_CONFIG_FILE }})
          log_info "为芯片架构 $CHIPSET 生成设备矩阵..."
          
          # 使用build-helper脚本获取设备列表，分离stdout和stderr
          DEVICE_JSON=$(${{ env.SCRIPT_BUILD_HELPER }} get-devices "$BASE_CONFIG" 2>/dev/null)
          log_info "获取到的设备列表: $DEVICE_JSON"
          
          # 如果设备列表为空，使用默认设备列表
          if [ "$DEVICE_JSON" = "[]" ]; then
            log_warning "设备列表为空，使用默认设备列表"
            DEVICE_JSON='["jdcloud_re-ss-01", "jdcloud_re-cs-02"]'
          fi
          
          # 验证JSON格式
          if ! echo "$DEVICE_JSON" | jq . > /dev/null 2>&1; then
            log_error "设备列表不是有效的JSON格式: $DEVICE_JSON"
            exit 1
          fi
          
          # 验证仓库配置JSON
          if ! echo "$REPOS_JSON" | jq . > /dev/null 2>&1; then
            log_error "仓库配置不是有效的JSON格式: $REPOS_JSON"
            exit 1
          fi
          
          # 生成构建矩阵，确保输出格式正确
          MATRIX=$(jq -c -n \
            --argjson repos "$REPOS_JSON" \
            --argjson devices "$DEVICE_JSON" \
            --argjson profiles "$PROFILES" \
            --arg chipset "$CHIPSET" \
            '[$repos[] as $repo | $devices[] as $device | $profiles[] as $profile | {repo_name: $repo.name, repo_url: $repo.url, repo_branch: $repo.default_branch, chipset: $chipset, device: $device, profile: $profile}]')
          
          log_info "生成的构建矩阵: $MATRIX"
          
          # 验证矩阵JSON
          if ! echo "$MATRIX" | jq . > /dev/null 2>&1; then
            log_error "构建矩阵不是有效的JSON格式: $MATRIX"
            exit 1
          fi
          
          # 使用环境文件设置输出，替代已弃用的 ::set-output
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "ubuntu=[\"${{ github.event.inputs.ubuntu_version || 'ubuntu-22.04' }}\"]" >> $GITHUB_OUTPUT
          echo "tag=${CHIPSET}-$(date '+%Y%m%d')" >> $GITHUB_OUTPUT
          log_success "矩阵和 Release Tag 生成完成。"

  prepare-third-party-cache:
    needs: generate-matrix
    runs-on: ${{ fromJson(needs.generate-matrix.outputs.ubuntu-matrix)[0] }}
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置脚本执行权限
        run: |
          chmod +x scripts/*.sh
          chmod +x configs/*.json

      - name: 初始化构建环境
        run: |
          source ${{ env.SCRIPT_LIB }}
          log_info "为第三方缓存初始化环境..."
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL ${{ env.DEPENDS_SCRIPT_URL }})
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 克隆基础源码
        run: |
          source ${{ env.SCRIPT_LIB }}
          log_info "克隆基础源码 (openwrt) 用于编译第三方包..."
          git clone https://github.com/openwrt/openwrt.git -b openwrt-23.05 /workdir/openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 加载第三方 Feeds
        run: |
          source ${{ env.SCRIPT_LIB }}
          log_info "执行 DIY 脚本加载第三方源..."
          $GITHUB_WORKSPACE/${{ env.SCRIPT_DIY }} pre-feeds

      - name: 更新和安装 Feeds
        run: |
          source ${{ env.SCRIPT_LIB }}
          cd openwrt
          log_info "更新和安装 Feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 调试Feeds安装
        run: |
          source ${{ env.SCRIPT_LIB }}
          cd openwrt
          log_info "=== 调试Feeds安装情况 ==="
          
          # 检查feeds.conf.default
          if [ -f "feeds.conf.default" ]; then
            log_info "feeds.conf.default内容:"
            cat feeds.conf.default
          else
            log_error "feeds.conf.default文件不存在"
          fi
          
          # 检查package/feeds目录
          if [ -d "package/feeds" ]; then
            log_info "package/feeds目录存在，内容:"
            ls -la package/feeds/
            
            # 统计各类型包的数量
            log_info "=== 包统计 ==="
            for feed_dir in package/feeds/*/; do
              if [ -d "$feed_dir" ]; then
                feed_name=$(basename "$feed_dir")
                package_count=$(find "$feed_dir" -name "Makefile" | wc -l)
                luci_count=$(find "$feed_dir" -name "luci-app-*" -type d | wc -l)
                log_info "$feed_name: 总包数=$package_count, luci-app数量=$luci_count"
              fi
            done
          else
            log_error "package/feeds目录不存在"
          fi

      - name: 生成第三方包配置
        run: |
          source ${{ env.SCRIPT_LIB }}
          cd openwrt
          log_info "生成包含所有第三方包的配置..."
          echo "CONFIG_TARGET_${{ needs.generate-matrix.outputs.chipset }}=y" > .config
          
          # 调试：检查feeds目录
          log_info "=== 调试Feeds目录 ==="
          log_info "当前工作目录: $(pwd)"
          log_info "package目录内容:"
          ls -la package/ || log_warning "package目录不存在"
          
          if [ -d "package/feeds" ]; then
            log_info "feeds目录内容:"
            ls -la package/feeds/
            log_info "所有feeds子目录:"
            find package/feeds -type d | head -20
            log_info "所有luci-app包:"
            find package/feeds -name "luci-app-*" -type d
          else
            log_error "package/feeds目录不存在"
          fi
          
          # 调用函数获取包列表
          log_info "=== 调用list-third-party-packages函数 ==="
          PACKAGES=$($GITHUB_WORKSPACE/${{ env.SCRIPT_BUILD_HELPER }} list-third-party-packages)
          log_info "获取到的包列表: $PACKAGES"
          
          # 将包列表添加到配置
          if [ -n "$PACKAGES" ]; then
            echo "$PACKAGES" >> .config
            log_info "已将第三方包添加到配置文件"
          else
            log_warning "没有找到第三方包，配置文件保持原样"
          fi
          
          make defconfig
          
          # 显示配置文件中的包配置
          log_info "=== 配置文件中的包配置 ==="
          grep "CONFIG_PACKAGE_luci-app" .config || log_warning "配置文件中没有luci-app包配置"

      - name: 缓存第三方包
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            /workdir/openwrt/dl
            /workdir/openwrt/build_dir
            /workdir/openwrt/staging_dir
            /workdir/openwrt/bin/packages
          key: third-party-${{ needs.generate-matrix.outputs.chipset }}-${{ runner.os }}-$(sha256sum ${{ env.SCRIPT_DIY }} | cut -d' ' -f1)
          restore-keys: |
            third-party-${{ needs.generate-matrix.outputs.chipset }}-${{ runner.os }}-

      - name: 编译第三方包
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          source ${{ env.SCRIPT_LIB }}
          cd openwrt
          log_info "开始编译所有第三方包...这可能需要很长时间。"
          make -j$(nproc) || make -j1 V=s
          log_success "第三方包编译完成。"

  build-firmware:
    needs: [prepare-third-party-cache, generate-matrix]
    runs-on: ${{ fromJson(needs.generate-matrix.outputs.ubuntu-matrix)[0] }}
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.build-matrix) }}
      fail-fast: false
    
    env:
      LOG_FILE: build-${{ matrix.repo_name }}-${{ matrix.chipset }}-${{ matrix.device }}-${{ matrix.profile }}.log
      ARTIFACT_NAME: ${{ matrix.repo_name }}-${{ matrix.chipset }}-${{ matrix.device }}-${{ matrix.profile }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置脚本执行权限
        run: |
          chmod +x scripts/*.sh
          chmod +x configs/*.json

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ matrix.chipset }}-${{ runner.os }}-$(sha256sum ${{ env.SCRIPT_DIY }} | cut -d' ' -f1)
          restore-keys: |
            ccache-${{ matrix.chipset }}-${{ runner.os }}-

      - name: 初始化构建环境
        run: |
          source ${{ env.SCRIPT_LIB }}
          log_info "开始为 ${{ env.ARTIFACT_NAME }} 初始化环境..."
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL ${{ env.DEPENDS_SCRIPT_URL }})
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 执行 DIY (第一阶段)
        run: |
          source ${{ env.SCRIPT_LIB }}
          log_info "执行 DIY 脚本 (第一阶段)..."
          $GITHUB_WORKSPACE/${{ env.SCRIPT_DIY }} pre-feeds

      - name: 克隆源码
        run: |
          source ${{ env.SCRIPT_LIB }}
          log_info "克隆仓库 ${{ matrix.repo_name }} 的 ${{ matrix.repo_branch }} 分支..."
          git clone ${{ matrix.repo_url }} -b ${{ matrix.repo_branch }} /workdir/openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 更新和安装 Feeds
        run: |
          source ${{ env.SCRIPT_LIB }}
          cd openwrt
          log_info "更新和安装 Feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 执行 DIY (第二阶段)
        run: |
          source ${{ env.SCRIPT_LIB }}
          log_info "执行 DIY 脚本 (第二阶段)..."
          $GITHUB_WORKSPACE/${{ env.SCRIPT_DIY }} post-feeds

      - name: 合并配置
        run: |
          source ${{ env.SCRIPT_LIB }}
          cd openwrt
          log_info "合并配置文件..."
          $GITHUB_WORKSPACE/${{ env.SCRIPT_BUILD_HELPER }} select-device .config ${{ matrix.device }} ${{ matrix.chipset }}
          ../scripts/kconfig.pl 'all' '+' "../configs/${{ matrix.chipset }}.base.config" '+' "../configs/${{ matrix.repo_name }}.config" '+' "../configs/${{ matrix.profile }}.config" > .config
          make defconfig
          log_success "配置合并完成。"

      - name: 恢复共享的第三方缓存
        uses: actions/cache@v4
        with:
          path: |
            /workdir/openwrt/dl
            /workdir/openwrt/build_dir
            /workdir/openwrt/staging_dir
            /workdir/openwrt/bin/packages
          key: third-party-${{ matrix.chipset }}-${{ runner.os }}-$(sha256sum ${{ env.SCRIPT_DIY }} | cut -d' ' -f1)

      - name: 编译固件
        run: |
          source ${{ env.SCRIPT_LIB }}
          cd openwrt
          log_info "开始编译固件... (大部分第三方包已缓存，并启用 ccache 加速)"
          export CCACHE_DIR=~/.ccache
          make -j$(nproc) || make -j1 V=s 2>&1 | tee -a "$LOG_FILE"
          log_success "固件编译完成。"

      - name: 整理和打包产物
        run: |
          source ${{ env.SCRIPT_LIB }}
          log_info "整理产物..."
          mkdir -p "$ARTIFACT_NAME"
          echo '${{ env.FIRMWARE_TYPES }}' | jq -r '.[]' | while read type; do
            log_info "正在查找固件类型: $type"
            FIRMWARE_PATH=$(find bin/targets -name "*${{ matrix.device }}*${type}" | head -n 1)
            if [ -n "$FIRMWARE_PATH" ]; then 
              log_success "找到固件: $FIRMWARE_PATH"; 
              cp "$FIRMWARE_PATH" "$ARTIFACT_NAME/"; 
            else 
              log_warning "未找到类型为 $type 的固件，跳过。"; 
            fi
          done
          cp .config "$ARTIFACT_NAME.config"
          cp bin/targets/*/config.buildinfo "$ARTIFACT_NAME/"
          cp bin/targets/*/manifest "$ARTIFACT_NAME/"
          PACKAGES_DIR=$(find bin/targets -type d -name packages | head -n 1)
          if [ -n "$PACKAGES_DIR" ]; then 
            tar -czf "$ARTIFACT_NAME/packages.tar.gz" -C "$PACKAGES_DIR" .; 
          else 
            log_warning "未找到 packages 目录，将跳过打包。"; 
            touch "$ARTIFACT_NAME/packages.tar.gz"; 
          fi
          cp "$LOG_FILE" "$ARTIFACT_NAME/"
          log_success "所有产物整理完成。"

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}/
          retention-days: 7

  create-release:
    needs: [generate-matrix, build-firmware]
    if: success() && needs.generate-matrix.outputs.release-tag != ''
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置脚本执行权限
        run: |
          chmod +x scripts/*.sh
          chmod +x configs/*.json

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 创建并发布 Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.generate-matrix.outputs.release-tag }}
          CHIPSET_NAME: ${{ github.event.inputs.chipset || env.DEFAULT_CHIPSET }}
        run: |
          source ${{ env.SCRIPT_LIB }}
          log_info "正在创建 Release: $TAG"
          MANIFEST_FILE=$(find artifacts -name 'manifest' | head -n 1)
          $GITHUB_WORKSPACE/${{ env.SCRIPT_BUILD_HELPER }} generate-notes "$MANIFEST_FILE" release_notes.md
          if gh release view "$TAG" > /dev/null 2>&1; then
            log_warning "Release $TAG 已存在，正在删除..."
            gh release delete "$TAG" --yes
            git push origin --delete "$TAG" || true
          fi
          gh release create "$TAG" --title "OpenWrt Firmware for $CHIPSET_NAME ($(date '+%Y-%m-%d'))" --notes-file release_notes.md --latest artifacts/**/*
          log_success "Release $TAG 发布成功！"

  # 新增：更新构建状态徽章
  update-build-status:
    needs: [create-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置脚本执行权限
        run: |
          chmod +x scripts/*.sh
          chmod +x configs/*.json

      - name: 更新构建状态徽章
        run: |
          source ${{ env.SCRIPT_LIB }}
          
          # 根据构建结果设置徽章状态
          if [ "${{ needs.create-release.result }}" == "success" ]; then
            STATUS="passing"
            COLOR="brightgreen"
            MESSAGE="Build%20Success"
          else
            STATUS="failing"
            COLOR="red"
            MESSAGE="Build%20Failed"
          fi
          
          # 更新README中的徽章
          sed -i "s|https://img.shields.io/badge/build-.*-.*|https://img.shields.io/badge/build-${MESSAGE}-${COLOR}?style=flat-square|g" README.md
          
          # 提交更改
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || git commit -m "Update build status badge [skip ci]"
          git push

  # 新增：记录构建统计
  record-build-stats:
    needs: [generate-matrix, build-firmware]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置脚本执行权限
        run: |
          chmod +x scripts/*.sh
          chmod +x configs/*.json

      - name: 记录构建统计
        run: |
          source ${{ env.SCRIPT_LIB }}
          
          # 创建或更新构建统计文件
          STATS_FILE="build-stats.json"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          CHIPSET="${{ needs.generate-matrix.outputs.chipset }}"
          RESULT="${{ needs.build-firmware.result }}"
          
          # 如果文件不存在，创建空数组
          if [ ! -f "$STATS_FILE" ]; then
            echo "[]" > "$STATS_FILE"
          fi
          
          # 添加新的构建记录
          jq --arg timestamp "$TIMESTAMP" --arg chipset "$CHIPSET" --arg result "$RESULT" \
            '. += [{timestamp: $timestamp, chipset: $chipset, result: $result}]' \
            "$STATS_FILE" > tmp.json && mv tmp.json "$STATS_FILE"
          
          # 提交更改
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "$STATS_FILE"
          git diff --staged --quiet || git commit -m "Record build statistics [skip ci]"
          git push

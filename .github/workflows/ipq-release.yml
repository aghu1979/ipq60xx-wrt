name: 通用型多仓库多架构 OpenWrt 自动构建 (共享缓存版)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      chipset:
        description: '选择芯片架构'
        required: true
        default: 'ipq60xx'
        type: choice
        options: [ipq60xx, x86-64, rockchip-armv8]
      ubuntu_version:
        description: '选择 Ubuntu 版本'
        required: true
        default: 'ubuntu-22.04'
        type: choice
        options: [ubuntu-24.04, ubuntu-22.04]

env:
  REPOS_CONFIG_FILE: 'repos.json'
  DEFAULT_CHIPSET: 'ipq60xx'
  PROFILES: '["Pro", "Max", "Ultra"]'
  FIRMWARE_TYPES: '["squashfs-factory.bin", "squashfs-sysupgrade.bin"]'
  DEPENDS_SCRIPT_URL: 'git.io/depends-ubuntu-2204'
  SCRIPT_DIY: 'scripts/diy.sh'
  SCRIPT_BUILD: 'scripts/build-helper.sh'
  TZ: Asia/Shanghai

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.set-matrix.outputs.matrix }}
      ubuntu-matrix: ${{ steps.set-matrix.outputs.ubuntu }}
      release-tag: ${{ steps.set-matrix.outputs.tag }}
      chipset: ${{ steps.set-matrix.outputs.chipset }}
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 生成构建矩阵
      id: set-matrix
      run: |
        source ${{ env.SCRIPT_BUILD }}
        CHIPSET="${{ github.event.inputs.chipset || env.DEFAULT_CHIPSET }}"
        echo "chipset=$CHIPSET" >> $GITHUB_OUTPUT
        
        BASE_CONFIG="configs/${CHIPSET}.base.config"
        if [ ! -f "$BASE_CONFIG" ]; then log_error "基础配置文件 $BASE_CONFIG 不存在！"; exit 1; fi
        REPOS_JSON=$(cat ${{ env.REPOS_CONFIG_FILE }})
        log_info "为芯片架构 $CHIPSET 生成设备矩阵..."
        DEVICE_JSON=$(./${{ env.SCRIPT_BUILD }} get-devices "$BASE_CONFIG"
        MATRIX=$(jq -n --argjson repos "$REPOS_JSON" --argjson devices "$DEVICE_JSON" --argjson profiles "$PROFILES" --arg chipset "$CHIPSET" '[$repos[] as $repo | $devices[] as $device | $profiles[] as $profile | {repo_name: $repo.name, repo_url: $repo.url, repo_branch: $repo.default_branch, chipset: $chipset, device: $device, profile: $profile}]')
        echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
        echo "ubuntu=[\"${{ github.event.inputs.ubuntu_version || 'ubuntu-24.04' }}\"]" >> $GITHUB_OUTPUT
        echo "tag=${CHIPSET}-$(date '+%Y%m%d')" >> $GITHUB_OUTPUT
        log_success "矩阵和 Release Tag 生成完成。"

  prepare-third-party-cache:
    needs: generate-matrix
    runs-on: ${{ fromJson(needs.generate-matrix.outputs.ubuntu-matrix)[0] }}
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 初始化构建环境
      run: |
        # source ${{ env.SCRIPT_BUILD }}
        # log_info "为第三方缓存初始化环境..."
        # sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        # sudo -E apt-get -qq update
        # sudo -E apt-get -qq install $(curl -fsSL ${{ env.DEPENDS_SCRIPT_URL }})
        # sudo -E apt-get -qq autoremove --purge
        # sudo -E apt-get -qq clean
        # sudo timedatectl set-timezone "$TZ"
        # sudo mkdir -p /workdir
        # sudo chown $USER:$GROUPS /workdir

        source ${{ env.SCRIPT_BUILD }}
        log_info "为第三方缓存初始化环境..."
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL ${{ env.DEPENDS_SCRIPT_URL }})
        sudo -E systemctl daemon-reload
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir


    - name: 克隆基础源码
      run: |
        source ${{ env.SCRIPT_BUILD }}
        log_info "克隆基础源码 (openwrt) 用于编译第三方包..."
        git clone https://github.com/openwrt/openwrt.git -b openwrt-23.05 /workdir/openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载第三方 Feeds
      run: |
        source ${{ env.SCRIPT_BUILD }}
        log_info "执行 DIY 脚本加载第三方源..."
        chmod +x ${{ env.SCRIPT_DIY }}
        ${{ env.SCRIPT_DIY }} pre-feeds

    - name: 更新和安装 Feeds
      run: |
        source ${{ env.SCRIPT_BUILD }}
        cd openwrt
        log_info "更新和安装 Feeds..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 生成第三方包配置
      run: |
        source ${{ env.SCRIPT_BUILD }}
        cd openwrt
        log_info "生成包含所有第三方包的配置..."
        echo "CONFIG_TARGET_${{ needs.generate-matrix.outputs.chipset }}=y" > .config
        ./${{ env.SCRIPT_BUILD }} list-third-party-packages >> .config
        make defconfig

    - name: 缓存第三方包
      uses: actions/cache@v4
      with:
        path: |
          /workdir/openwrt/dl
          /workdir/openwrt/build_dir
          /workdir/openwrt/staging_dir
          /workdir/openwrt/bin/packages
        key: third-party-${{ needs.generate-matrix.outputs.chipset }}-${{ runner.os }}-$(sha256sum ${{ env.SCRIPT_DIY }} | cut -d' ' -f1)
        restore-keys: |
          third-party-${{ needs.generate-matrix.outputs.chipset }}-${{ runner.os }}-

    - name: 编译第三方包
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        source ${{ env.SCRIPT_BUILD }}
        cd openwrt
        log_info "开始编译所有第三方包...这可能需要很长时间。"
        make -j$(nproc) || make -j1 V=s
        log_success "第三方包编译完成。"

  build-firmware:
    needs: [prepare-third-party-cache, generate-matrix]
    runs-on: ${{ fromJson(needs.generate-matrix.outputs.ubuntu-matrix)[0] }}
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.build-matrix) }}
      fail-fast: false
    
    env:
      LOG_FILE: build-${{ matrix.repo_name }}-${{ matrix.chipset }}-${{ matrix.device }}-${{ matrix.profile }}.log
      ARTIFACT_NAME: ${{ matrix.repo_name }}-${{ matrix.chipset }}-${{ matrix.device }}-${{ matrix.profile }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 初始化构建环境
      run: |
        # source ${{ env.SCRIPT_BUILD }}
        # log_info "开始为 ${{ env.ARTIFACT_NAME }} 初始化环境..."
        # sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        # sudo -E apt-get -qq update
        # sudo -E apt-get -qq install $(curl -fsSL ${{ env.DEPENDS_SCRIPT_URL }})
        # sudo -E apt-get -qq autoremove --purge
        # sudo -E apt-get -qq clean
        # sudo timedatectl set-timezone "$TZ"
        # sudo mkdir -p /workdir
        # sudo chown $USER:$GROUPS /workdir


        source ${{ env.SCRIPT_BUILD }}
        log_info "开始为 ${{ env.ARTIFACT_NAME }} 初始化环境..."
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL ${{ env.DEPENDS_SCRIPT_URL }})
        sudo -E systemctl daemon-reload
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir


    - name: 执行 DIY (第一阶段)
      run: |
        source ${{ env.SCRIPT_BUILD }}
        log_info "执行 DIY 脚本 (第一阶段)..."
        chmod +x ${{ env.SCRIPT_DIY }}
        ${{ env.SCRIPT_DIY }} pre-feeds

    - name: 克隆源码
      run: |
        source ${{ env.SCRIPT_BUILD }}
        log_info "克隆仓库 ${{ matrix.repo_name }} 的 ${{ matrix.repo_branch }} 分支..."
        git clone ${{ matrix.repo_url }} -b ${{ matrix.repo_branch }} /workdir/openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 更新和安装 Feeds
      run: |
        source ${{ env.SCRIPT_BUILD }}
        cd openwrt
        log_info "更新和安装 Feeds..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 执行 DIY (第二阶段)
      run: |
        source ${{ env.SCRIPT_BUILD }}
        log_info "执行 DIY 脚本 (第二阶段)..."
        ${{ env.SCRIPT_DIY }} post-feeds

    - name: 合并配置
      run: |
        source ${{ env.SCRIPT_BUILD }}
        cd openwrt
        log_info "合并配置文件..."
        ../${{ env.SCRIPT_BUILD }} select-device .config ${{ matrix.device }} ${{ matrix.chipset }}
        ../scripts/kconfig.pl 'all' '+' "../configs/${{ matrix.chipset }}.base.config" '+' "../configs/${{ matrix.repo_name }}.config" '+' "../configs/${{ matrix.profile }}.config" > .config
        make defconfig
        log_success "配置合并完成。"

    - name: 恢复共享的第三方缓存
      uses: actions/cache@v4
      with:
        path: |
          /workdir/openwrt/dl
          /workdir/openwrt/build_dir
          /workdir/openwrt/staging_dir
          /workdir/openwrt/bin/packages
        key: third-party-${{ matrix.chipset }}-${{ runner.os }}-$(sha256sum ${{ env.SCRIPT_DIY }} | cut -d' ' -f1)

    - name: 编译固件
      run: |
        source ${{ env.SCRIPT_BUILD }}
        cd openwrt
        log_info "开始编译固件... (大部分第三方包已缓存)"
        make -j$(nproc) || make -j1 V=s 2>&1 | tee -a "$LOG_FILE"
        log_success "固件编译完成。"

    - name: 整理和打包产物
      run: |
        source ${{ env.SCRIPT_BUILD }}
        log_info "整理产物..."
        mkdir -p "$ARTIFACT_NAME"
        echo '${{ env.FIRMWARE_TYPES }}' | jq -r '.[]' | while read type; do
          log_info "正在查找固件类型: $type"
          FIRMWARE_PATH=$(find bin/targets -name "*${{ matrix.device }}*${type}" | head -n 1)
          if [ -n "$FIRMWARE_PATH" ]; then log_success "找到固件: $FIRMWARE_PATH"; cp "$FIRMWARE_PATH" "$ARTIFACT_NAME/"; else log_warning "未找到类型为 $type 的固件，跳过。"; fi
        done
        cp .config "$ARTIFACT_NAME.config"
        cp bin/targets/*/config.buildinfo "$ARTIFACT_NAME/"
        cp bin/targets/*/manifest "$ARTIFACT_NAME/"
        PACKAGES_DIR=$(find bin/targets -type d -name packages | head -n 1)
        if [ -n "$PACKAGES_DIR" ]; then tar -czf "$ARTIFACT_NAME/packages.tar.gz" -C "$PACKAGES_DIR" .; else log_warning "未找到 packages 目录，将跳过打包。"; touch "$ARTIFACT_NAME/packages.tar.gz"; fi
        cp "$LOG_FILE" "$ARTIFACT_NAME/"
        log_success "所有产物整理完成。"

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_NAME }}/
        retention-days: 7

  create-release:
    needs: [generate-matrix, build-firmware]
    if: success() && needs.generate-matrix.outputs.release-tag != ''
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: 创建并发布 Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG: ${{ needs.generate-matrix.outputs.release-tag }}
        CHIPSET_NAME: ${{ github.event.inputs.chipset || env.DEFAULT_CHIPSET }}
      run: |
        source ${{ env.SCRIPT_BUILD }}
        log_info "正在创建 Release: $TAG"
        MANIFEST_FILE=$(find artifacts -name 'manifest' | head -n 1)
        ./${{ env.SCRIPT_BUILD }} generate-notes "$MANIFEST_FILE" release_notes.md
        if gh release view "$TAG" > /dev/null 2>&1; then
          log_warning "Release $TAG 已存在，正在删除..."
          gh release delete "$TAG" --yes
          git push origin --delete "$TAG" || true
        fi
        gh release create "$TAG" --title "OpenWrt Firmware for $CHIPSET_NAME ($(date '+%Y-%m-%d'))" --notes-file release_notes.md --latest artifacts/**/*
        log_success "Release $TAG 发布成功！"

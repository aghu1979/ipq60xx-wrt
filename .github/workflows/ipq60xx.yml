name: OpenWrt 分步式固件编译

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '选择源码分支'
        required: true
        default: 'immortalwrt'
        type: choice
        options:
        - openwrt
        - immortalwrt
        - libwrt
      arch:
        description: '选择芯片架构'
        required: true
        default: 'ipq60xx'
        type: choice
        options:
        - ipq60xx
      release:
        description: '是否发布到Release'
        required: true
        default: 'false'
        type: boolean
      upload_bin:
        description: '是否上传bin目录'
        required: true
        default: 'false'
        type: boolean

env:
  # 分支URL映射
  REPO_URL_OPENWRT: "https://github.com/laipeng668/openwrt.git"
  REPO_URL_IMMORTALWRT: "https://github.com/laipeng668/immortalwrt.git"
  REPO_URL_LIBWRT: "https://github.com/laipeng668/openwrt-6.x.git"
  
  # 全局环境变量
  SOURCE_REPO: ${{ github.event.inputs.branch }}
  DEVICE_TARGET: qualcommax
  DEVICE_SUBTARGET: ${{ github.event.inputs.arch }}
  FIRMWARE_RELEASE: ${{ github.event.inputs.release }}
  UPLOAD_BIN_DIR: ${{ github.event.inputs.upload_bin }}
  FILE_DATE: ${{ format('{0}-{1}', github.event.inputs.branch, github.event.inputs.arch) }}
  DATE: ${{ format('{0}-{1}', github.event.inputs.branch, github.event.inputs.arch) }}
  FIRMWARE_TAG: ${{ format('{0}-{1}', github.event.inputs.branch, github.event.inputs.arch) }}
  OPENWRT_PATH: ${{ github.workspace }}/openwrt
  TEMP_DIR: ${{ github.workspace }}/temp
  LOG_DIR: ${{ github.workspace }}/logs
  PACKAGE_DIR: ${{ github.workspace }}/packages

jobs:
  # 准备阶段：下载源码、配置基础系统
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      cache-key-base: ${{ steps.cache-key-base.outputs.key }}
      cache-key-pro: ${{ steps.cache-key-pro.outputs.key }}
      cache-key-max: ${{ steps.cache-key-max.outputs.key }}
      cache-key-ultra: ${{ steps.cache-key-ultra.outputs.key }}
      devices: ${{ steps.get-devices.outputs.devices }}
      kernel-version: ${{ steps.get-kernel.outputs.version }}
      repo-url: ${{ steps.set-env.outputs.repo-url }}
      branch-name: ${{ steps.set-env.outputs.branch-name }}
      branch-abbr: ${{ steps.set-env.outputs.branch-abbr }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置环境变量
        id: set-env
        run: |
          # 设置仓库URL和分支
          case "${{ env.SOURCE_REPO }}" in
            "openwrt") 
              REPO_URL="${{ env.REPO_URL_OPENWRT }}"
              BRANCH_NAME="master"
              BRANCH_ABBR="openwrt"
              ;;
            "immortalwrt") 
              REPO_URL="${{ env.REPO_URL_IMMORTALWRT }}"
              BRANCH_NAME="master"
              BRANCH_ABBR="immwrt"
              ;;
            "libwrt") 
              REPO_URL="${{ env.REPO_URL_LIBWRT }}"
              BRANCH_NAME="k6.12-nss"
              BRANCH_ABBR="libwrt"
              ;;
          esac
          
          echo "repo-url=$REPO_URL" >> $GITHUB_OUTPUT
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "branch-abbr=$BRANCH_ABBR" >> $GITHUB_OUTPUT
          
          # 设置全局环境变量
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "BRANCH_ABBR=$BRANCH_ABBR" >> $GITHUB_ENV
          echo "VERSION_KERNEL=$(date +%Y.%m)" >> $GITHUB_ENV
          echo "VERSION_INFO=最新更新于 $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          
          echo "仓库URL: $REPO_URL"
          echo "分支名称: $BRANCH_NAME"
          echo "分支缩写: $BRANCH_ABBR"

      - name: 生成各阶段缓存键
        id: cache-key-base
        run: |
          CACHE_KEY="${{ env.SOURCE_REPO }}-${{ env.BRANCH_NAME }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-base-${{ hashFiles('configs/*.config') }}"
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "基础系统缓存键: $CACHE_KEY"
          
      - name: 生成Pro配置缓存键
        id: cache-key-pro
        run: |
          CACHE_KEY="${{ env.SOURCE_REPO }}-${{ env.BRANCH_NAME }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-pro-${{ hashFiles('configs/*.config') }}"
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "Pro配置缓存键: $CACHE_KEY"
          
      - name: 生成Max配置缓存键
        id: cache-key-max
        run: |
          CACHE_KEY="${{ env.SOURCE_REPO }}-${{ env.BRANCH_NAME }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-max-${{ hashFiles('configs/*.config') }}"
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "Max配置缓存键: $CACHE_KEY"
          
      - name: 生成Ultra配置缓存键
        id: cache-key-ultra
        run: |
          CACHE_KEY="${{ env.SOURCE_REPO }}-${{ env.BRANCH_NAME }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-ultra-${{ hashFiles('configs/*.config') }}"
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "Ultra配置缓存键: $CACHE_KEY"

      - name: 检查并恢复基础系统缓存
        id: restore-cache-base
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.OPENWRT_PATH }}
            ${{ env.TEMP_DIR }}
          key: ${{ steps.cache-key-base.outputs.key }}
          restore-keys: |
            ${{ env.SOURCE_REPO }}-${{ env.BRANCH_NAME }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-base-

      - name: 显示缓存状态
        run: |
          if [ "${{ steps.restore-cache-base.outputs.cache-hit }}" == "true" ]; then
            echo "✅ 基础系统缓存命中成功"
          else
            echo "❌ 基础系统缓存未命中，将进行完整编译"
          fi

      - name: 创建目录结构
        run: |
          mkdir -p ${{ env.OPENWRT_PATH }}
          mkdir -p ${{ env.TEMP_DIR }}
          mkdir -p ${{ env.LOG_DIR }}
          mkdir -p ${{ env.PACKAGE_DIR }}

      - name: 下载源码
        if: steps.restore-cache-base.outputs.cache-hit != 'true'
        run: |
          echo "🚀 开始下载源码..."
          git clone ${{ env.REPO_URL }} ${{ env.OPENWRT_PATH }}
          cd ${{ env.OPENWRT_PATH }}
          git checkout ${{ env.BRANCH_NAME }}
          echo "✅ 源码下载完成"

      - name: 合并基础配置文件
        run: |
          echo "🔧 开始合并基础配置文件..."
          
          # 合并基础配置文件（不包含Pro/Max/Ultra）
          cat configs/${{ env.DEVICE_SUBTARGET }}_base.config > ${{ env.OPENWRT_PATH }}/.config
          cat configs/${{ env.BRANCH_ABBR }}.config >> ${{ env.OPENWRT_PATH }}/.config
          
          echo "✅ 基础配置文件合并完成"
          echo "配置文件内容预览:"
          head -20 ${{ env.OPENWRT_PATH }}/.config

      - name: 获取设备列表
        id: get-devices
        run: |
          echo "📋 获取设备列表..."
          DEVICES=$(grep -oE 'CONFIG_TARGET_DEVICE_.*_DEVICE_[^=]+=y' ${{ env.OPENWRT_PATH }}/.config | sed -E 's/.*DEVICE_([^=]+)=y/\1/' | tr '\n' ' ')
          echo "devices=$DEVICES" >> $GITHUB_OUTPUT
          echo "检测到的设备: $DEVICES"

      - name: 获取内核版本
        id: get-kernel
        run: |
          echo "🔍 获取内核版本..."
          VERSION=$(grep 'CONFIG_KERNEL_' ${{ env.OPENWRT_PATH }}/.config | head -1 | cut -d'=' -f2 | tr -d '"')
          if [ -z "$VERSION" ]; then
            VERSION="6.12"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "内核版本: $VERSION"

      - name: 运行DIY脚本
        run: |
          echo "🛠️ 运行DIY脚本..."
          chmod +x scripts/diy.sh
          ./scripts/diy.sh ${{ env.OPENWRT_PATH }}
          echo "✅ DIY脚本执行完成"

      - name: 更新 feeds
        if: steps.restore-cache-base.outputs.cache-hit != 'true'
        run: |
          echo "🔄 更新 feeds..."
          cd ${{ env.OPENWRT_PATH }}
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "✅ Feeds 更新完成"

      - name: 保存基础系统缓存
        if: steps.restore-cache-base.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.OPENWRT_PATH }}
            ${{ env.TEMP_DIR }}
          key: ${{ steps.cache-key-base.outputs.key }}

  # 基础系统编译阶段
  build-base:
    needs: prepare
    runs-on: ubuntu-22.04
    outputs:
      build-status: ${{ steps.compile.outputs.status }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置环境变量
        run: |
          echo "REPO_URL=${{ needs.prepare.outputs.repo-url }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ needs.prepare.outputs.branch-name }}" >> $GITHUB_ENV
          echo "BRANCH_ABBR=${{ needs.prepare.outputs.branch-abbr }}" >> $GITHUB_ENV
          echo "VERSION_KERNEL=${{ needs.prepare.outputs.kernel-version }}" >> $GITHUB_ENV
          echo "VERSION_INFO=最新更新于 $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: 恢复基础系统缓存
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.OPENWRT_PATH }}
            ${{ env.TEMP_DIR }}
          key: ${{ needs.prepare.outputs.cache-key-base }}

      - name: 创建目录结构
        run: |
          mkdir -p ${{ env.LOG_DIR }}
          mkdir -p ${{ env.PACKAGE_DIR }}

      - name: 设置编译环境
        run: |
          echo "⚙️ 设置基础系统编译环境..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 设置其他配置
          echo "CONFIG_USE_APK=n" >> .config
          
          # 生成配置
          make defconfig
          echo "✅ 基础系统编译环境设置完成"

      - name: 下载依赖
        run: |
          echo "📥 下载依赖..."
          cd ${{ env.OPENWRT_PATH }}
          make download -j$(nproc)
          echo "✅ 依赖下载完成"

      - name: 编译基础系统
        id: compile
        run: |
          echo "🔨 开始编译基础系统..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 设置错误处理
          set -e
          trap 'echo "❌ 基础系统编译失败，记录错误日志..."; tail -1000 build_log.txt > ${{ env.LOG_DIR }}/base_error.log; exit 1' ERR
          
          # 开始编译并记录日志
          make -j$(nproc) 2>&1 | tee build_log.txt
          
          echo "✅ 基础系统编译完成"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 保存基础系统编译结果
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.OPENWRT_PATH }}
            ${{ env.TEMP_DIR }}
          key: ${{ needs.prepare.outputs.cache-key-base }}

  # Pro配置编译阶段
  build-pro:
    needs: [prepare, build-base]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.prepare.outputs.devices) }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置环境变量
        run: |
          echo "REPO_URL=${{ needs.prepare.outputs.repo-url }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ needs.prepare.outputs.branch-name }}" >> $GITHUB_ENV
          echo "BRANCH_ABBR=${{ needs.prepare.outputs.branch-abbr }}" >> $GITHUB_ENV
          echo "VERSION_KERNEL=${{ needs.prepare.outputs.kernel-version }}" >> $GITHUB_ENV
          echo "VERSION_INFO=最新更新于 $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "CONFIG_TYPE=Pro" >> $GITHUB_ENV

      - name: 检查基础系统编译状态
        run: |
          if [ "${{ needs.build-base.outputs.build-status }}" != "success" ]; then
            echo "❌ 基础系统编译失败，跳过Pro配置编译"
            exit 1
          fi

      - name: 恢复基础系统缓存
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.OPENWRT_PATH }}
            ${{ env.TEMP_DIR }}
          key: ${{ needs.prepare.outputs.cache-key-base }}

      - name: 创建目录结构
        run: |
          mkdir -p ${{ env.LOG_DIR }}
          mkdir -p ${{ env.PACKAGE_DIR }}

      - name: 合并Pro配置
        run: |
          echo "🔧 合并Pro配置..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 合并Pro配置
          cat configs/Pro.config >> .config
          
          # 生成配置
          make defconfig
          echo "✅ Pro配置合并完成"

      - name: 编译Pro配置固件
        run: |
          echo "🔨 开始编译Pro配置固件: ${{ matrix.device }}..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 设置设备配置
          sed -i "s/CONFIG_TARGET_DEVICE_.*_DEVICE_.*/CONFIG_TARGET_DEVICE_${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}_DEVICE_${{ matrix.device }}=y/" .config
          
          # 生成配置
          make defconfig
          
          # 设置错误处理
          set -e
          trap 'echo "❌ Pro配置编译失败，记录错误日志..."; tail -1000 build_log.txt > ${{ env.LOG_DIR }}/${{ matrix.device }}_pro_error.log; exit 1' ERR
          
          # 开始编译并记录日志
          make -j$(nproc) 2>&1 | tee build_log.txt
          
          echo "✅ Pro配置固件编译完成: ${{ matrix.device }}"

      - name: 整理Pro配置产出物
        run: |
          echo "📦 整理Pro配置产出物..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 创建设备临时目录
          DEVICE_TEMP_DIR="${{ env.TEMP_DIR }}/pro/${{ matrix.device }}"
          mkdir -p $DEVICE_TEMP_DIR
          
          # 复制并重命名固件
          for file in bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*${{ env.DEVICE_SUBTARGET }}*${{ matrix.device }}*squashfs-*.bin; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if [[ "$filename" =~ "factory.bin" ]]; then
                new_name="${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-factory-Pro.bin"
              elif [[ "$filename" =~ "sysupgrade.bin" ]]; then
                new_name="${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-sysupgrade-Pro.bin"
              fi
              cp "$file" "$DEVICE_TEMP_DIR/$new_name"
              echo "Pro固件重命名: $filename -> $new_name"
            fi
          done
          
          # 复制并重命名配置文件
          if [ -f ".config" ]; then
            cp .config "$DEVICE_TEMP_DIR/${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Pro.config"
          fi
          
          # 复制并重命名清单文件
          if [ -f "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/${{ env.SOURCE_REPO }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.manifest" ]; then
            cp "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/${{ env.SOURCE_REPO }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.manifest" \
               "$DEVICE_TEMP_DIR/${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Pro.manifest"
          fi
          
          # 复制并重命名构建信息
          if [ -f "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/config.buildinfo" ]; then
            cp "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/config.buildinfo" \
               "$DEVICE_TEMP_DIR/${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Pro.config.buildinfo"
          fi
          
          # 复制日志
          if [ -f "build_log.txt" ]; then
            cp build_log.txt "$DEVICE_TEMP_DIR/${{ matrix.device }}_pro_build.log"
          fi
          
          echo "✅ Pro配置产出物整理完成: ${{ matrix.device }}"

      - name: 上传Pro配置产出物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Pro
          path: ${{ env.TEMP_DIR }}/pro/${{ matrix.device }}
          retention-days: 7

  # Max配置编译阶段
  build-max:
    needs: [prepare, build-base]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.prepare.outputs.devices) }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置环境变量
        run: |
          echo "REPO_URL=${{ needs.prepare.outputs.repo-url }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ needs.prepare.outputs.branch-name }}" >> $GITHUB_ENV
          echo "BRANCH_ABBR=${{ needs.prepare.outputs.branch-abbr }}" >> $GITHUB_ENV
          echo "VERSION_KERNEL=${{ needs.prepare.outputs.kernel-version }}" >> $GITHUB_ENV
          echo "VERSION_INFO=最新更新于 $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "CONFIG_TYPE=Max" >> $GITHUB_ENV

      - name: 检查基础系统编译状态
        run: |
          if [ "${{ needs.build-base.outputs.build-status }}" != "success" ]; then
            echo "❌ 基础系统编译失败，跳过Max配置编译"
            exit 1
          fi

      - name: 恢复基础系统缓存
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.OPENWRT_PATH }}
            ${{ env.TEMP_DIR }}
          key: ${{ needs.prepare.outputs.cache-key-base }}

      - name: 创建目录结构
        run: |
          mkdir -p ${{ env.LOG_DIR }}
          mkdir -p ${{ env.PACKAGE_DIR }}

      - name: 合并Max配置
        run: |
          echo "🔧 合并Max配置..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 合并Max配置
          cat configs/Max.config >> .config
          
          # 生成配置
          make defconfig
          echo "✅ Max配置合并完成"

      - name: 编译Max配置固件
        run: |
          echo "🔨 开始编译Max配置固件: ${{ matrix.device }}..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 设置设备配置
          sed -i "s/CONFIG_TARGET_DEVICE_.*_DEVICE_.*/CONFIG_TARGET_DEVICE_${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}_DEVICE_${{ matrix.device }}=y/" .config
          
          # 生成配置
          make defconfig
          
          # 设置错误处理
          set -e
          trap 'echo "❌ Max配置编译失败，记录错误日志..."; tail -1000 build_log.txt > ${{ env.LOG_DIR }}/${{ matrix.device }}_max_error.log; exit 1' ERR
          
          # 开始编译并记录日志
          make -j$(nproc) 2>&1 | tee build_log.txt
          
          echo "✅ Max配置固件编译完成: ${{ matrix.device }}"

      - name: 整理Max配置产出物
        run: |
          echo "📦 整理Max配置产出物..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 创建设备临时目录
          DEVICE_TEMP_DIR="${{ env.TEMP_DIR }}/max/${{ matrix.device }}"
          mkdir -p $DEVICE_TEMP_DIR
          
          # 复制并重命名固件
          for file in bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*${{ env.DEVICE_SUBTARGET }}*${{ matrix.device }}*squashfs-*.bin; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if [[ "$filename" =~ "factory.bin" ]]; then
                new_name="${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-factory-Max.bin"
              elif [[ "$filename" =~ "sysupgrade.bin" ]]; then
                new_name="${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-sysupgrade-Max.bin"
              fi
              cp "$file" "$DEVICE_TEMP_DIR/$new_name"
              echo "Max固件重命名: $filename -> $new_name"
            fi
          done
          
          # 复制并重命名配置文件
          if [ -f ".config" ]; then
            cp .config "$DEVICE_TEMP_DIR/${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Max.config"
          fi
          
          # 复制并重命名清单文件
          if [ -f "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/${{ env.SOURCE_REPO }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.manifest" ]; then
            cp "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/${{ env.SOURCE_REPO }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.manifest" \
               "$DEVICE_TEMP_DIR/${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Max.manifest"
          fi
          
          # 复制并重命名构建信息
          if [ -f "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/config.buildinfo" ]; then
            cp "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/config.buildinfo" \
               "$DEVICE_TEMP_DIR/${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Max.config.buildinfo"
          fi
          
          # 复制日志
          if [ -f "build_log.txt" ]; then
            cp build_log.txt "$DEVICE_TEMP_DIR/${{ matrix.device }}_max_build.log"
          fi
          
          echo "✅ Max配置产出物整理完成: ${{ matrix.device }}"

      - name: 上传Max配置产出物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Max
          path: ${{ env.TEMP_DIR }}/max/${{ matrix.device }}
          retention-days: 7

  # Ultra配置编译阶段
  build-ultra:
    needs: [prepare, build-base]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.prepare.outputs.devices) }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置环境变量
        run: |
          echo "REPO_URL=${{ needs.prepare.outputs.repo-url }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ needs.prepare.outputs.branch-name }}" >> $GITHUB_ENV
          echo "BRANCH_ABBR=${{ needs.prepare.outputs.branch-abbr }}" >> $GITHUB_ENV
          echo "VERSION_KERNEL=${{ needs.prepare.outputs.kernel-version }}" >> $GITHUB_ENV
          echo "VERSION_INFO=最新更新于 $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "CONFIG_TYPE=Ultra" >> $GITHUB_ENV

      - name: 检查基础系统编译状态
        run: |
          if [ "${{ needs.build-base.outputs.build-status }}" != "success" ]; then
            echo "❌ 基础系统编译失败，跳过Ultra配置编译"
            exit 1
          fi

      - name: 恢复基础系统缓存
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.OPENWRT_PATH }}
            ${{ env.TEMP_DIR }}
          key: ${{ needs.prepare.outputs.cache-key-base }}

      - name: 创建目录结构
        run: |
          mkdir -p ${{ env.LOG_DIR }}
          mkdir -p ${{ env.PACKAGE_DIR }}

      - name: 合并Ultra配置
        run: |
          echo "🔧 合并Ultra配置..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 合并Ultra配置
          cat configs/Ultra.config >> .config
          
          # 生成配置
          make defconfig
          echo "✅ Ultra配置合并完成"

      - name: 编译Ultra配置固件
        run: |
          echo "🔨 开始编译Ultra配置固件: ${{ matrix.device }}..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 设置设备配置
          sed -i "s/CONFIG_TARGET_DEVICE_.*_DEVICE_.*/CONFIG_TARGET_DEVICE_${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}_DEVICE_${{ matrix.device }}=y/" .config
          
          # 生成配置
          make defconfig
          
          # 设置错误处理
          set -e
          trap 'echo "❌ Ultra配置编译失败，记录错误日志..."; tail -1000 build_log.txt > ${{ env.LOG_DIR }}/${{ matrix.device }}_ultra_error.log; exit 1' ERR
          
          # 开始编译并记录日志
          make -j$(nproc) 2>&1 | tee build_log.txt
          
          echo "✅ Ultra配置固件编译完成: ${{ matrix.device }}"

      - name: 整理Ultra配置产出物
        run: |
          echo "📦 整理Ultra配置产出物..."
          cd ${{ env.OPENWRT_PATH }}
          
          # 创建设备临时目录
          DEVICE_TEMP_DIR="${{ env.TEMP_DIR }}/ultra/${{ matrix.device }}"
          mkdir -p $DEVICE_TEMP_DIR
          
          # 复制并重命名固件
          for file in bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*${{ env.DEVICE_SUBTARGET }}*${{ matrix.device }}*squashfs-*.bin; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if [[ "$filename" =~ "factory.bin" ]]; then
                new_name="${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-factory-Ultra.bin"
              elif [[ "$filename" =~ "sysupgrade.bin" ]]; then
                new_name="${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-sysupgrade-Ultra.bin"
              fi
              cp "$file" "$DEVICE_TEMP_DIR/$new_name"
              echo "Ultra固件重命名: $filename -> $new_name"
            fi
          done
          
          # 复制并重命名配置文件
          if [ -f ".config" ]; then
            cp .config "$DEVICE_TEMP_DIR/${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Ultra.config"
          fi
          
          # 复制并重命名清单文件
          if [ -f "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/${{ env.SOURCE_REPO }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.manifest" ]; then
            cp "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/${{ env.SOURCE_REPO }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.manifest" \
               "$DEVICE_TEMP_DIR/${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Ultra.manifest"
          fi
          
          # 复制并重命名构建信息
          if [ -f "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/config.buildinfo" ]; then
            cp "bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/config.buildinfo" \
               "$DEVICE_TEMP_DIR/${{ env.BRANCH_ABBR }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Ultra.config.buildinfo"
          fi
          
          # 复制日志
          if [ -f "build_log.txt" ]; then
            cp build_log.txt "$DEVICE_TEMP_DIR/${{ matrix.device }}_ultra_build.log"
          fi
          
          echo "✅ Ultra配置产出物整理完成: ${{ matrix.device }}"

      - name: 上传Ultra配置产出物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.DEVICE_SUBTARGET }}-${{ matrix.device }}-Ultra
          path: ${{ env.TEMP_DIR }}/ultra/${{ matrix.device }}
          retention-days: 7

  # 汇总阶段：整理所有产出物并发布
  publish:
    needs: [prepare, build-base, build-pro, build-max, build-ultra]
    runs-on: ubuntu-22.04
    if: github.event.inputs.release == 'true'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置环境变量
        run: |
          echo "REPO_URL=${{ needs.prepare.outputs.repo-url }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ needs.prepare.outputs.branch-name }}" >> $GITHUB_ENV
          echo "BRANCH_ABBR=${{ needs.prepare.outputs.branch-abbr }}" >> $GITHUB_ENV
          echo "VERSION_KERNEL=${{ needs.prepare.outputs.kernel-version }}" >> $GITHUB_ENV
          echo "VERSION_INFO=最新更新于 $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: 创建目录结构
        run: |
          mkdir -p ${{ env.TEMP_DIR }}
          mkdir -p ${{ env.LOG_DIR }}
          mkdir -p ${{ env.PACKAGE_DIR }}

      - name: 下载所有产出物
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.TEMP_DIR }}/artifacts

      - name: 整理产出物
        run: |
          echo "📦 整理所有产出物..."
          
          # 创建最终目录结构
          FINAL_DIR="${{ env.TEMP_DIR }}/final"
          mkdir -p $FINAL_DIR
          
          # 合并所有设备产出物
          for config_type in pro max ultra; do
            for device_dir in ${{ env.TEMP_DIR }}/artifacts/*${config_type}/*; do
              if [ -d "$device_dir" ]; then
                echo "处理配置: $config_type, 设备: $(basename $device_dir)"
                
                # 复制所有文件到最终目录
                cp -r "$device_dir"/* "$FINAL_DIR/"
              fi
            done
          done
          
          # 打包配置文件
          cd $FINAL_DIR
          tar -zcf ${{ env.DEVICE_SUBTARGET }}-config.tar.gz *.config
          
          # 打包日志文件
          tar -zcf ${{ env.DEVICE_SUBTARGET }}-log.tar.gz *_build.log *_error.log 2>/dev/null || true
          
          # 创建软件包列表
          ls -la > ${{ env.TEMP_DIR }}/final/package_list.txt
          
          echo "✅ 产出物整理完成"

      - name: 生成Release说明
        run: |
          echo "📝 生成Release说明..."
          
          # 创建Release说明
          cat > ${{ env.TEMP_DIR }}/release_notes.md << EOF
          # ${{ env.SOURCE_REPO }} 固件发布
          
          ## 📒 固件信息
          - 这是分步式编译的固件，包含Pro、Max、Ultra三种配置
          - 💻 这是 ${{ env.DEVICE_SUBTARGET }} 平台使用的 ${{ env.SOURCE_REPO }} 固件
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.BRANCH_NAME }}
          - 🌐 默认地址: **192.168.111.1**
          - 🔑 默认密码: none
          - 📶 默认WIFI密码: 12345678
          
          ## 🧊 固件版本
          - 固件内核版本：**${{ env.VERSION_KERNEL }}**
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.VERSION_INFO }}
          
          ## 📦 包含的设备
          ${{ needs.prepare.outputs.devices }}
          
          ## 📋 包含的软件包
          \`\`\`
          $(cat ${{ env.TEMP_DIR }}/final/package_list.txt)
          \`\`\`
          
          ## 📥 下载说明
          - 固件文件命名规则: ${{ env.BRANCH_ABBR }}-芯片-设备-类型-配置.bin
          - 例如: ${{ env.BRANCH_ABBR }}-ipq60xx-jdcloud_re-ss-01-sysupgrade-Pro.bin
          
          ---
          作者: Mary
          发布时间: $(date '+%Y-%m-%d %H:%M:%S')
          EOF
          
          echo "✅ Release说明生成完成"

      - name: 发布到Release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.TEMP_DIR }}/final/*
          bodyFile: ${{ env.TEMP_DIR }}/release_notes.md

  # 清理阶段：删除旧缓存
  cleanup:
    needs: [prepare, build-base, build-pro, build-max, build-ultra, publish]
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: 删除旧缓存
        run: |
          echo "🗑️ 删除旧缓存..."
          
          # 获取缓存列表并删除
          gh cache list --key ${{ env.SOURCE_REPO }}-${{ env.BRANCH_NAME }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          
          # 输出缓存状态
          echo "========缓存状态========"
          echo "ccache: $(du -sh ${{ env.OPENWRT_PATH }}/.ccache 2>/dev/null | cut -f 1 || echo 'N/A')"
          echo "staging: $(du -sh ${{ env.OPENWRT_PATH }}/staging_dir 2>/dev/null | cut -f 1 || echo 'N/A')"
          echo "✅ 缓存清理完成"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
